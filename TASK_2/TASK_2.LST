Turbo Assembler	 Version 4.1	    02/20/25 21:23:49	    Page 1
task_2.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     org 100h
      4				     locals @@
      5	0100  E9 0250		     Start: jmp	MAIN
      6				     ;@@, macro	endm, equ,
      7
      8				     ;-------------CONSTANTS_BEGIN-------------------
      9	      =B800		     VIDEO_MEMORY_SEGMENT_ADDR	 equ 0b800h
     10	      =0002		     BYTES_PER_SYMBOL		 equ 2
     11	      =0050		     SCREEN_WIDTH		 equ 80
     12	      =0003		     PATTERN_OFFSET		 equ 3
     13	      =0081		     COMMAND_LINE_BEGIN_ADDRESS	 equ 81h
     14	      =000A		     REGISTERS_AMOUNT		 equ 10
     15	      =0012		     TOGGLE_SCAN_CODE		 equ 12h
     16	      =0005		     FRAME_X_POSITION		 equ 5
     17	      =0003		     FRAME_Y_POSITION		 equ 3
     18				     ;--------------CONSTANTS_END--------------------
     19
     20				     ;-----------------------------------------
     21				     ; Calls on	int 09h, checks	if scan-code is	'e' and	enable/disable frame
     22				     ; Return: nothing
     23				     ; Destr: nothing
     24				     ;-----------------------------------------
     25	0103			     FRAME_ENABLE_INT proc
     26	0103  50			 push ax
     27					 ; mov ax, VIDEO_MEMORY_SEGMENT_ADDR
     28					 ; mov es, ax
     29					 ; mov ah, 4eh
     30					 ; mov bx, 5 * SCREEN_WIDTH * BYTES_PER_SYMBOL + 40 * BYTES_PER_SYMBOL
     31	0104  E4 60			 in al,	60h
     32
     33	0106  3C 12			 cmp al, TOGGLE_SCAN_CODE		 ; if SCAN-CODE	IS ... then toggle IS_FRAME_ACTIVE
     34	0108  75 0A			 jne @@ANOTHER_BUTTON
     35					 ;mov es:[bx], ax
     36	010A  2E: A0 011Ar		 mov al, byte ptr cs:IS_FRAME_ACTIVE
     37	010E  34 01			 xor al, 1
     38	0110  2E: A2 011Ar		 mov byte ptr cs:IS_FRAME_ACTIVE, al
     39	0114				 @@ANOTHER_BUTTON:
     40
     41	0114  58			 pop ax
     42	0115  EA			 db 0eah
     43	0116			     Original_int09h_handler_offset:
     44	0116  0000			 dw 0
     45	0118			     Original_int09h_handler_segment:
     46	0118  0000			 dw 0
     47	011A  00		     IS_FRAME_ACTIVE: db 0
     48	011B				 endp
     49				     ;-----------------------------------------
     50
     51				     ;-----------------------------------------
     52				     ; Calls on	int 08h, updates frame if enabled every	55ms
     53				     ; Return: nothing
     54				     ; Destr: nothing
     55				     ;-----------------------------------------
     56	011B			     FRAME_UPDATE_INT proc
     57	011B  50			 push ax
Turbo Assembler	 Version 4.1	    02/20/25 21:23:49	    Page 2
task_2.asm



     58	011C  2E: A0 011Ar		 mov al, byte ptr cs:IS_FRAME_ACTIVE
     59	0120  3C 01			 cmp al, 1
     60	0122  75 3C			 jne @@DONT_SHOW_FRAME		 ; if IS_FRAME_ACTIVE
     61
     62	0124  53 51 52 57 56		 push bx cx dx di si
     63	0129  55 06 1E 16		 push bp es ds ss		 ; save	all registers (for correct interrupt and for print)
     64
     65	012D  0E			 push cs
     66	012E  1F			 pop ds				 ; ds =	cs
     67
     68	012F  FC			 cld				 ; for correct work string functions
     69	0130  B8 1003			 mov ax, 1003h			 ; set video memory highest bit	for blinking or	for high    +
     70				     contrast
     71	0133  B3 00			 mov bl, 0h			 ; for high constast
     72	0135  CD 10			 int 10h
     73
     74	0137  E8 00B5			 call INIT_SCREEN
     75	013A  BE 0226r			 mov si, offset	FRAME_PATTERN +	3 * PATTERN_OFFSET * 1 ; set frame_pattern
     76
     77	013D  BF 0326			 mov di, ( FRAME_X_POSITION * SCREEN_WIDTH * BYTES_PER_SYMBOL)	  \
     78						 + FRAME_Y_POSITION		   * BYTES_PER_SYMBOL	; initial offset
     79	0140  B4 6A			 mov ah, 1101010b				 ; set color mode
     80	0142  BB 000C			 mov bx, REGISTERS_AMOUNT + 2			 ; height
     81	0145  B9 0009			 mov cx, 9					 ; width |ax ABCD|
     82											 ;	 012345678 7+2
     83
     84	0148  83 EB 02			 sub bx, 2 ;
     85	014B  83 E9 02			 sub cx, 2 ; decrease to include border	in number
     86
     87	014E  E8 00B6			 call DRAW_FRAME
     88
     89	0151  BF 03C8			 mov di, ( (FRAME_X_POSITION + 1) * SCREEN_WIDTH * BYTES_PER_SYMBOL) \
     90						 + (FRAME_Y_POSITION + 1)		 * BYTES_PER_SYMBOL ; initial offset
     91	0154  E8 000F			 call PRINT_REGISTERS
     92
     93	0157  17 1F 07 5D		 pop ss	ds es bp
     94	015B  5E 5F 5A 59 5B		 pop si	di dx cx bx  ; restore values
     95	0160				 @@DONT_SHOW_FRAME:
     96	0160  58			 pop ax
     97	0161  EA			 db 0eah
     98	0162			     Original_int08h_handler_offset:
     99	0162  0000			 dw 0
    100	0164			     Original_int08h_handler_segment:
    101	0164  0000			 dw 0
    102	0166				 endp
    103				     ;-----------------------------------------
    104
    105				     ;-----------------------------------------
    106				     ; Prints every register value
    107				     ; Return: nothing
    108				     ; Destr: al, cx, si, di
    109				     ;-----------------------------------------
    110	0166			     PRINT_REGISTERS proc
    111	0166  B9 000A			 mov cx, REGISTERS_AMOUNT
    112	0169  BE 0188r			 mov si, offset	REG_PATTERN
    113	016C  8B EC			 mov bp, sp
    114	016E  83 C5 14			 add bp, REGISTERS_AMOUNT * 2 ;	to go from top to bottom bc registers pushed in	such order
Turbo Assembler	 Version 4.1	    02/20/25 21:23:49	    Page 3
task_2.asm



    115	0171			     @@PRINT_REG:
    116	0171  57			 push di
    117	0172  AC			 lodsb
    118	0173  AB			 stosw
    119	0174  AC			 lodsb
    120	0175  AB			 stosw
    121	0176  AC			 lodsb
    122	0177  AB			 stosw	     ; print ax_ (space)
    123
    124	0178  8B 5E 00			 mov bx, ss:[bp]
    125	017B  4D			 dec bp
    126	017C  4D			 dec bp	     ; get next	value
    127	017D  E8 0026			 call PRINT_REG_VALUE
    128
    129	0180  5F			 pop di
    130	0181  81 C7 00A0		 add di, SCREEN_WIDTH *	BYTES_PER_SYMBOL
    131	0185  E2 EA			 loop @@PRINT_REG
    132
    133	0187  C3			 ret
    134	0188				 endp
    135	0188  61 78 20 62 78 20	63+  REG_PATTERN: db "ax bx cx dx di si	bp es ds ss "
    136	      78 20 64 78 20 64	69+
    137	      20 73 69 20 62 70	20+
    138	      65 73 20 64 73 20	73+
    139	      73 20
    140				     ;-----------------------------------------
    141
    142				     ;-----------------------------------------
    143				     ; Prints register value (bx) to es:[di] in	hex mode, aka itoa
    144				     ; Destr: di
    145				     ;-----------------------------------------
    146	01A6			     PRINT_REG_VALUE proc
    147	01A6  50 51 52			 push ax cx dx
    148					 ; mov bx, cs
    149	01A9  B9 0004			 mov cx, 4   ; in 16 bit register _4_ parts of 4 bits
    150	01AC				 @@GET_DIGIT:
    151	01AC  8B D3			 mov dx, bx				 ; save	in dx
    152	01AE  81 E3 F000		 and bx, 1111000000000000b		 ; mask	first 4	bits
    153	01B2  D1 EB D1 EB D1 EB	D1+	 shr bx, 12				 ; delete zeros	(bc little endian)
    154	      EB D1 EB D1 EB D1	EB+
    155	      D1 EB D1 EB D1 EB	D1+
    156	      EB D1 EB
    157	01CA  8A 87 01DFr		 mov al, [bx + offset HEX_TO_ASCCI_ARR]	 ; get ascii character
    158	01CE  D1 E2 D1 E2 D1 E2	D1+	 shl dx, 4				 ; delete first	4 bits and replace new value
    159	      E2
    160	01D6  8B DA			 mov bx, dx				 ; resave dx to	bx
    161	01D8  AB			 stosw
    162	01D9  E2 D1			 loop @@GET_DIGIT
    163	01DB  5A 59 58			 pop dx	cx ax
    164	01DE  C3			 ret
    165	01DF			     HEX_TO_ASCCI_ARR:
    166	01DF  30 31 32 33 34 35	36+	 db '0123456789ABCDEF'
    167	      37 38 39 41 42 43	44+
    168	      45 46
    169	01EF				 endp
    170				     ;-----------------------------------------
    171
Turbo Assembler	 Version 4.1	    02/20/25 21:23:49	    Page 4
task_2.asm



    172				     ;-----------------------------------------
    173				     ; Initialise screen address to es
    174				     ; Return: nothing
    175				     ; Destr: es
    176				     ;-----------------------------------------
    177	01EF			     INIT_SCREEN proc
    178	01EF  53			 push bx
    179	01F0  BB B800			 mov bx, VIDEO_MEMORY_SEGMENT_ADDR
    180	01F3  8E C3			 mov es, bx
    181	01F5  5B			 pop bx
    182	01F6  C3			 ret
    183	01F7				 endp
    184				     ;-----------------------------------------
    185
    186				     ;-----------------------------------------
    187				     ; Put string at es:[di], where first  symbol ds:[si]
    188				     ;				    second, etc	  ds:[si + 1] and print	it cx times
    189				     ;				    last is	  ds:[si + 2]
    190				     ; Destr:	 al, di, si
    191				     ;-----------------------------------------
    192	01F7			     DRAW_LINE proc
    193	01F7  57			 push di
    194	01F8  51			 push cx
    195	01F9  AC			 lodsb
    196	01FA  AB			 stosw
    197	01FB  AC			 lodsb
    198	01FC  F3> AB			 rep stosw
    199	01FE  AC			 lodsb
    200	01FF  AB			 stosw
    201	0200  59			 pop cx
    202	0201  5F			 pop di
    203	0202  81 C7 00A0		 add di, SCREEN_WIDTH *	BYTES_PER_SYMBOL
    204	0206  C3			 ret
    205	0207				 endp
    206				     ;-----------------------------------------
    207
    208				     ;-----------------------------------------
    209				     ; Put frame at es:[di], where first line	ds:[si]	    ---	ds:[si + 2]
    210				     ;				   second, etc	ds:[si + 3] ---	ds:[si + 5] and	print it bx times
    211				     ;				   last	is	ds:[si + 6] ---	ds:[si + 8]
    212				     ; Destr:	 al, bx, cx, di, si
    213				     ;-----------------------------------------
    214	0207			     DRAW_FRAME	proc
    215	0207  E8 FFED			 call DRAW_LINE
    216
    217	020A				 DRAW_N_LINES:
    218	020A  85 DB			 test bx, bx
    219	020C  74 08			 jz DRAW_N_LINES_END
    220	020E  56			 push si
    221	020F  E8 FFE5			 call DRAW_LINE
    222	0212  5E			 pop si
    223	0213  4B			 dec bx
    224	0214  EB F4			 jmp DRAW_N_LINES
    225	0216				 DRAW_N_LINES_END:
    226
    227	0216  83 C6 03			 add si, PATTERN_OFFSET
    228	0219  E8 FFDB			 call DRAW_LINE
Turbo Assembler	 Version 4.1	    02/20/25 21:23:49	    Page 5
task_2.asm



    229	021C  C3			 ret
    230	021D				 endp
    231				     ;-----------------------------------------
    232
    233	021D  31 32 33 34 35 36	37+  FRAME_PATTERN: db '123456789'					     ; debug
    234	      38 39
    235	0226  2B 2D 2B 7C 20 7C	2B+		    db '+-+| |+-+'					     ; cool
    236	      2D 2B
    237	022F  C9 CD BB BA 20 BA	C8+		    db 0c9h, 0cdh, 0bbh, 0bah, ' ', 0bah, 0c8h,	0cdh, 0bch   ; stripes
    238	      CD BC
    239	0238  04 03 04 03 20 03	04+		    db 04h, 03h, 04h, 03h, ' ',	03h, 04h, 03h, 04h	     ; hearts
    240	      03 04
    241	0241			     END_OF_RESIDENT:		 ; All before will save	as resident. Below will	destroy	after	    +
    242				     program finishes
    243
    244				     ;-----------------------------------------
    245				     ; Read number from	ds:[si]	and put	integer	result to ax
    246				     ; Destr ax, si
    247				     ;-----------------------------------------
    248	0241			     ATOI proc
    249	0241  51			 push cx
    250	0242  33 C0			 xor ax, ax	 ; ax =	0
    251	0244  B5 0A			 mov ch, 10	 ; multiplyer
    252
    253	0246				 ATOI_READ_SYMBOL:
    254	0246  8A 0C			 mov cl, [si]
    255	0248  80 F9 30			 cmp cl, '0'
    256	024B  72 0F			 jb ATOI_END
    257	024D  80 F9 39			 cmp cl, '9'
    258	0250  77 0A			 ja ATOI_END
    259	0252  80 E9 30			 sub cl, '0'
    260	0255  F6 E5			 mul ch
    261	0257  02 C1			 add al, cl
    262	0259  46			 inc si
    263	025A  EB EA			 jmp ATOI_READ_SYMBOL
    264	025C				 ATOI_END:
    265	025C  59			 pop cx
    266	025D  C3			 ret
    267	025E				 endp
    268				     ;-----------------------------------------
    269
    270				     ;-----------------------------------------
    271				     ; Read number from	ds:[si]	and put	integer	hex result to ax
    272				     ; Destr ax, si
    273				     ;-----------------------------------------
    274	025E			     ATOIHEX proc
    275	025E  51			 push cx
    276	025F  33 C0			 xor ax, ax	 ; ax =	0
    277
    278	0261				 ATOIHEX_READ_SYMBOL:
    279	0261  8A 0C			 mov cl, [si]
    280	0263  80 F9 30			 cmp cl, '0'
    281	0266  72 08			 jb ATOIHEX_CHECK_LETTER
    282	0268  80 F9 39			 cmp cl, '9'
    283	026B  77 03			 ja ATOIHEX_CHECK_LETTER
    284	026D  EB 0E 90			 jmp ATOIHEX_DIGIT
    285
Turbo Assembler	 Version 4.1	    02/20/25 21:23:49	    Page 6
task_2.asm



    286	0270				 ATOIHEX_CHECK_LETTER:
    287	0270  80 F9 61			 cmp cl, 'a'
    288	0273  72 1E			 jb ATOIHEX_END
    289	0275  80 F9 68			 cmp cl, 'h'
    290	0278  77 19			 ja ATOIHEX_END
    291	027A  EB 07 90			 jmp ATOIHEX_LETTER
    292
    293	027D				 ATOIHEX_DIGIT:
    294	027D  80 E9 30			 sub cl, '0'
    295	0280  EB 04 90			 jmp ATOIHEX_MULT
    296
    297	0283				 ATOIHEX_LETTER:
    298	0283  80 E9 57			 sub cl, 'a' - 10
    299
    300	0286				 ATOIHEX_MULT:
    301	0286  D1 E0 D1 E0 D1 E0	D1+	 shl ax, 4
    302	      E0
    303	028E  02 C1			 add al, cl
    304	0290  46			 inc si
    305	0291  EB CE			 jmp ATOIHEX_READ_SYMBOL
    306
    307	0293				 ATOIHEX_END:
    308	0293  59			 pop cx
    309	0294  C3			 ret
    310	0295				 endp
    311				     ;-----------------------------------------
    312
    313				     ;-----------------------------------------
    314				     ; Skip spaces at ds:[si] by incrementing si
    315				     ; Destr: si
    316				     ;-----------------------------------------
    317	0295			     SKIP_SPACES proc
    318	0295  51			 push cx
    319	0296				 SKIP_SPACES_BEGIN:
    320	0296  8A 0C			 mov cl, [si]
    321	0298  80 F9 20			 cmp cl, ' '
    322	029B  75 03			 jne SKIP_SPACES_END
    323	029D  46			 inc si
    324	029E  EB F6			 jmp SKIP_SPACES_BEGIN
    325	02A0				 SKIP_SPACES_END:
    326	02A0  59			 pop cx
    327	02A1  C3			 ret
    328	02A2				 endp
    329				     ;-----------------------------------------
    330
    331				     ;-----------------------------------------
    332				     ; Read string from	ds:[si]
    333				     ; Ret: ah - color scheme
    334				     ;	    bx - height
    335				     ;	    cx - width
    336				     ;	    dx - addr of text_str
    337				     ;	    si - addr of frame_pattern
    338				     ; Destr: ax, bx, cx, dx, si
    339				     ;-----------------------------------------
    340	02A2			     PARSE_COMMAND_LINE	proc
    341	02A2  57			 push di
    342	02A3  BE 0081			 mov si, COMMAND_LINE_BEGIN_ADDRESS
Turbo Assembler	 Version 4.1	    02/20/25 21:23:49	    Page 7
task_2.asm



    343
    344	02A6  E8 FFEC			 call SKIP_SPACES
    345	02A9  E8 FF95			 call ATOI
    346	02AC  8B D8			 mov bx, ax	     ; get width TODO: move to another function
    347
    348	02AE  E8 FFE4			 call SKIP_SPACES
    349	02B1  E8 FF8D			 call ATOI
    350	02B4  8B C8			 mov cx, ax	     ; get height
    351
    352	02B6  E8 FFDC			 call SKIP_SPACES
    353	02B9  E8 FFA2			 call ATOIHEX
    354	02BC  D1 E0 D1 E0 D1 E0	D1+	 shl ax, 8   ; shift color scheme to ah
    355	      E0 D1 E0 D1 E0 D1	E0+
    356	      D1 E0
    357	02CC  50			 push ax     ; save ax with color scheme
    358
    359	02CD  E8 FFC5			 call SKIP_SPACES
    360	02D0  E8 FF6E			 call ATOI			 ; get pattern number (0 - custom, next	- as in	programm at +
    361				     FRAME_PATTERN)
    362	02D3  8B D6			 mov dx, si  ; save si in dx
    363	02D5  3D 0000			 cmp ax, 0
    364	02D8  74 13			 je COMM_LINE_PATTERN
    365
    366	02DA  48			 dec ax				 ; if ax != 0 :	ax-- to	get correct offset
    367	02DB  8B F8			 mov di, ax			 ; di =	ax
    368	02DD  D1 E7 D1 E7 D1 E7		 shl di, 3			 ; di *= 8
    369	02E3  03 F8			 add di, ax			 ; di += ax => di *= 9
    370	02E5  8D B5 021Dr		 lea si, [FRAME_PATTERN	+ di]	 ; address to constant (hardcoded) string with pattern
    371	02E9  40			 inc ax				 ; return ax to	non zero to be sure for	correct	algorithm   +
    372				     next
    373	02EA  EB 04 90			 jmp COMM_LINE_END
    374
    375	02ED				 COMM_LINE_PATTERN:  ; if ax ==	0 === custom frame_pattern
    376	02ED  E8 FFA5			 call SKIP_SPACES    ; si = first not space symbol
    377
    378	02F0				 COMM_LINE_END:
    379
    380	02F0  56			 push si	     ; save si with frame pattern address
    381
    382					 ; now need to find string which will be inside	frame
    383	02F1  8B F2			 mov si, dx	     ; return si index from dx to si to	continue command line parsing
    384	02F3  E8 FF9F			 call SKIP_SPACES    ; skip spaces to first nonspaceable
    385	02F6  3D 0000			 cmp ax, 0	     ;
    386	02F9  74 06			 je COMM_LINE_CUSTOM_PATTERN
    387	02FB  E8 FF97			 call SKIP_SPACES	   ; if	ax != 0	it means that printable	string exactly after the    +
    388				     offset-number
    389	02FE  EB 0B 90			 jmp COMM_LINE_CUSTOM_PATTERN_END
    390
    391	0301				 COMM_LINE_CUSTOM_PATTERN: ; if	ax == 0	(custom	line)
    392	0301  B0 20			 mov al, ' '
    393	0303  E8 0018			 call STRLEN		   ; find length of pattern (usually 9,	but can	be more)
    394	0306  03 F1			 add si, cx		   ; add this length offset to si
    395	0308  E8 FF8A			 call SKIP_SPACES	   ; and skip spaces to	next nonspaceable symbol
    396	030B				 COMM_LINE_CUSTOM_PATTERN_END:
    397
    398	030B  8B D6			 mov dx, si	     ; save addr of string to dx
    399
Turbo Assembler	 Version 4.1	    02/20/25 21:23:49	    Page 8
task_2.asm



    400	030D  5E			 pop si
    401
    402	030E  58			 pop ax
    403	030F  5F			 pop di
    404	0310  C3			 ret
    405	0311				 endp
    406				     ;-----------------------------------------
    407
    408				     ;-----------------------------------------
    409				     ; Put string at es:[di] with length of cx
    410				     ; Destr: al, cx, di, si
    411				     ;-----------------------------------------
    412	0311			     PRINT_STRING proc
    413	0311  50			 push ax	     ; to save color scheme
    414	0312  B0 0D			 mov al, 0dh	     ; 0d = \n TODO: fix this??? Not universal function
    415	0314  E8 0007			 call STRLEN	     ; put length in cx
    416	0317  58			 pop ax
    417	0318  49			 dec cx		     ; not print \n
    418	0319				 PRINT_STRING_LOOP:
    419	0319  AC			 lodsb
    420	031A  AB			 stosw
    421	031B  E2 FC			 loop PRINT_STRING_LOOP
    422	031D  C3			 ret
    423	031E				 endp
    424				     ;-----------------------------------------
    425
    426				     ;-----------------------------------------
    427				     ; Count length of string from ds:[si] and puts it in cx, terminal symbol should be	in al
    428				     ; Ret: cx - length	of string
    429				     ; Destr: ax, cx
    430				     ;-----------------------------------------
    431	031E			     STRLEN proc
    432	031E  06			 push es
    433	031F  57			 push di
    434	0320  53			 push bx
    435	0321  8B FE			 mov di, si	 ; di =	si, for	scasb
    436	0323  8C DB			 mov bx, ds
    437	0325  8E C3			 mov es, bx	 ; es =	ds, for	scasb
    438	0327  B9 FFFF			 mov cx, -1	 ; cx =	FFFF
    439	032A  F2> AE			 repne scasb	 ; while (cx-- != 0 && ZF == 0): ZF = (al == ES:[DI++])
    440	032C  F7 D9			 neg cx
    441	032E  49			 dec cx		 ; return cx to	normal positive	value
    442	032F  5B			 pop bx
    443	0330  5F			 pop di
    444	0331  07			 pop es
    445	0332  C3			 ret
    446	0333				 endp
    447				     ;-----------------------------------------
    448
    449				     ;-----------------------------------------
    450				     ; Fills offset and	segment	of interrupt #al to [di] and [di + 2], and rewrites
    451				     ; in interrupt table with ds:[dx].	So dx should contain offset of our function
    452				     ; Destr: ah, bx, es
    453				     ;-----------------------------------------
    454	0333			     CREATE_ISR_CHAIN proc
    455	0333  B4 35			 mov ah, 35h		     ; call DOS	Fn(35h)	- to get current address
    456	0335  CD 21			 int 21h		     ; es:[bx] is current interrupt function
Turbo Assembler	 Version 4.1	    02/20/25 21:23:49	    Page 9
task_2.asm



    457	0337  89 1D			 mov [di], bx		     ; save address ofset
    458	0339  8C 45 02			 mov [di + 2], es	     ; save segment
    459	033C  B4 25			 mov ah, 25h		     ;
    460	033E  CD 21			 int 21h		     ; call DOS	Fn(25h), to put	in interrupt table ds:[dx] address
    461	0340  C3			 ret
    462	0341				 endp
    463				     ;-----------------------------------------
    464
    465				     ;-----------------------------------------
    466				     ; Makes our programm resident and terminate programm
    467				     ; Destr: ax, dx
    468				     ;-----------------------------------------
    469	0341			     MAKE_RESIDENT proc
    470	0341  BA 0241r			 mov dx, offset	END_OF_RESIDENT	     ; select area to save
    471	0344  D1 EA D1 EA D1 EA	D1+	 shr dx, 4			     ; bc in dx	paragraphs of 16 bytes,	so divide by 16
    472	      EA
    473	034C  42			 inc dx				     ; for some	cases where last bytes could lost
    474	034D  B8 3100			 mov ax, 3100h			     ; create resident
    475	0350  CD 21			 int 21h
    476	0352  C3			 ret
    477	0353				 endp
    478				     ;-----------------------------------------
    479
    480	0353			     MAIN:
    481	0353  B0 09			 mov al, 09h
    482	0355  BA 0103r			 mov dx, offset	FRAME_ENABLE_INT
    483	0358  BF 0116r			 mov di, offset	Original_int09h_handler_offset
    484	035B  E8 FFD5			 call CREATE_ISR_CHAIN				 ; create my isr handler for 09h
    485
    486	035E  B0 08			 mov al, 08h
    487	0360  BA 011Br			 mov dx, offset	FRAME_UPDATE_INT
    488	0363  BF 0162r			 mov di, offset	Original_int08h_handler_offset
    489	0366  E8 FFCA			 call CREATE_ISR_CHAIN				 ; create my isr handler for 08h
    490
    491					 ; Finish Programm
    492	0369  E8 FFD5			 call MAKE_RESIDENT
    493
    494				     end Start
Turbo Assembler	 Version 4.1	    02/20/25 21:23:49	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/20/25"
??FILENAME			  Text	 "task_2  "
??TIME				  Text	 "21:23:49"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@ANOTHER_BUTTON		  Near	 DGROUP:0114
@@DONT_SHOW_FRAME		  Near	 DGROUP:0160
@@GET_DIGIT			  Near	 DGROUP:01AC
@@PRINT_REG			  Near	 DGROUP:0171
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TASK_2
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ATOI				  Near	 DGROUP:0241
ATOIHEX				  Near	 DGROUP:025E
ATOIHEX_CHECK_LETTER		  Near	 DGROUP:0270
ATOIHEX_DIGIT			  Near	 DGROUP:027D
ATOIHEX_END			  Near	 DGROUP:0293
ATOIHEX_LETTER			  Near	 DGROUP:0283
ATOIHEX_MULT			  Near	 DGROUP:0286
ATOIHEX_READ_SYMBOL		  Near	 DGROUP:0261
ATOI_END			  Near	 DGROUP:025C
ATOI_READ_SYMBOL		  Near	 DGROUP:0246
BYTES_PER_SYMBOL		  Number 0002
COMMAND_LINE_BEGIN_ADDRESS	  Number 0081
COMM_LINE_CUSTOM_PATTERN	  Near	 DGROUP:0301
COMM_LINE_CUSTOM_PATTERN_END	  Near	 DGROUP:030B
COMM_LINE_END			  Near	 DGROUP:02F0
COMM_LINE_PATTERN		  Near	 DGROUP:02ED
CREATE_ISR_CHAIN		  Near	 DGROUP:0333
DRAW_FRAME			  Near	 DGROUP:0207
DRAW_LINE			  Near	 DGROUP:01F7
DRAW_N_LINES			  Near	 DGROUP:020A
DRAW_N_LINES_END		  Near	 DGROUP:0216
END_OF_RESIDENT			  Near	 DGROUP:0241
FRAME_ENABLE_INT		  Near	 DGROUP:0103
FRAME_PATTERN			  Near	 DGROUP:021D
FRAME_UPDATE_INT		  Near	 DGROUP:011B
FRAME_X_POSITION		  Number 0005
FRAME_Y_POSITION		  Number 0003
HEX_TO_ASCCI_ARR		  Near	 DGROUP:01DF
INIT_SCREEN			  Near	 DGROUP:01EF
IS_FRAME_ACTIVE			  Near	 DGROUP:011A
MAIN				  Near	 DGROUP:0353
MAKE_RESIDENT			  Near	 DGROUP:0341
ORIGINAL_INT08H_HANDLER_OFFSET	  Near	 DGROUP:0162
ORIGINAL_INT08H_HANDLER_SEGMENT	  Near	 DGROUP:0164
Turbo Assembler	 Version 4.1	    02/20/25 21:23:49	    Page 11
Symbol Table



ORIGINAL_INT09H_HANDLER_OFFSET	  Near	 DGROUP:0116
ORIGINAL_INT09H_HANDLER_SEGMENT	  Near	 DGROUP:0118
PARSE_COMMAND_LINE		  Near	 DGROUP:02A2
PATTERN_OFFSET			  Number 0003
PRINT_REGISTERS			  Near	 DGROUP:0166
PRINT_REG_VALUE			  Near	 DGROUP:01A6
PRINT_STRING			  Near	 DGROUP:0311
PRINT_STRING_LOOP		  Near	 DGROUP:0319
REGISTERS_AMOUNT		  Number 000A
REG_PATTERN			  Near	 DGROUP:0188
SCREEN_WIDTH			  Number 0050
SKIP_SPACES			  Near	 DGROUP:0295
SKIP_SPACES_BEGIN		  Near	 DGROUP:0296
SKIP_SPACES_END			  Near	 DGROUP:02A0
START				  Near	 DGROUP:0100
STRLEN				  Near	 DGROUP:031E
TOGGLE_SCAN_CODE		  Number 0012
VIDEO_MEMORY_SEGMENT_ADDR	  Number B800

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  036C Word	  Public  CODE
